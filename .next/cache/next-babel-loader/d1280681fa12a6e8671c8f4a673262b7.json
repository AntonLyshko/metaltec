{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\Next\\\\metaltec\\\\components\\\\product-list\\\\product-item.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nconst ProductList = ({\n  data: {\n    loading,\n    error,\n    items\n  },\n  search\n}, req) => {\n  if (error) return \"Error loading restaurants\";\n\n  if (items && items.length) {\n    //searchQuery\n    const searchQuery = items.filter(query => query.name.toLowerCase().includes(search));\n\n    if (searchQuery.length != 0) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"h-100\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }\n      }, searchQuery.map(res => __jsx(\"div\", {\n        className: \"af-class-product-card\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"af-class-product-card-image af-class-product-card-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 25\n        }\n      }, __jsx(\"img\", {\n        src: `http://localhost:1337${res.image.url}`,\n        loading: \"lazy\",\n        alt: true,\n        className: \"af-class-image-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 94\n        }\n      })), __jsx(\"div\", {\n        className: \"af-class-product-card-description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 25\n        }\n      }, __jsx(\"div\", {\n        className: \"af-class-div-block-38\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 27\n        }\n      }, __jsx(\"h3\", {\n        className: \"af-class-product-name-title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 27\n        }\n      }, res.name, __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 81\n        }\n      }))), __jsx(\"div\", {\n        className: \"af-class-price-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 27\n        }\n      }, __jsx(\"h2\", {\n        className: \"af-class-product-price\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }\n      }, res.price, \" K\\u010D\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 82\n        }\n      }))))))));\n    } else {\n      return __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 14\n        }\n      }, \"No Products Found\");\n    }\n  }\n\n  return __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, \"Loading...\");\n};\n\nconst query = gql`\n  {\n    products {\n      _id\n      name\n      price\n      image {\n        url\n      }\n    }\n  }\n`;\nexport default graphql(query, {\n  props: ({\n    data\n  }) => ({\n    data\n  })\n})(ProductList);","map":{"version":3,"sources":["C:/Users/anton/Desktop/Next/metaltec/components/product-list/product-item.js"],"names":["ProductList","data","loading","error","items","search","req","length","searchQuery","filter","query","name","toLowerCase","includes","map","res","image","url","price","gql","graphql","props"],"mappings":";;;;AACA,MAAMA,WAAW,GAAG,CAClB;AAAEC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAR;AAAmCC,EAAAA;AAAnC,CADkB,EAElBC,GAFkB,KAGf;AACH,MAAIH,KAAJ,EAAW,OAAO,2BAAP;;AAGX,MAAIC,KAAK,IAAIA,KAAK,CAACG,MAAnB,EAA2B;AACzB;AACA,UAAMC,WAAW,GAAGJ,KAAK,CAACK,MAAN,CAAaC,KAAK,IACpCA,KAAK,CAACC,IAAN,CAAWC,WAAX,GAAyBC,QAAzB,CAAkCR,MAAlC,CADkB,CAApB;;AAGA,QAAIG,WAAW,CAACD,MAAZ,IAAsB,CAA1B,EAA6B;AAC3B,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGC,WAAW,CAACM,GAAZ,CAAgBC,GAAG,IAER;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAK,QAAA,SAAS,EAAC,qDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqE;AAAK,QAAA,GAAG,EAAG,wBAAuBA,GAAG,CAACC,KAAJ,CAAUC,GAAI,EAAhD;AAAmD,QAAA,OAAO,EAAC,MAA3D;AAAkE,QAAA,GAAG,MAArE;AAAsE,QAAA,SAAS,EAAC,kBAAhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAArE,CADA,EAEA;AAAK,QAAA,SAAS,EAAC,mCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAI,QAAA,SAAS,EAAC,6BAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA6CF,GAAG,CAACJ,IAAjD,EAAsD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAtD,CADA,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,SAAS,EAAC,wBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwCI,GAAG,CAACG,KAA5C,cAAqD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAArD,CADF,CAJF,CAFA,CAFX,CADH,CADF,CADF;AAsBD,KAvBD,MAuBO;AACL,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAP;AACD;AACF;;AACD,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,CAxCD;;AA0CA,MAAMR,KAAK,GAAGS,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;AAYA,eAAeC,OAAO,CAACV,KAAD,EAAQ;AAC5BW,EAAAA,KAAK,EAAE,CAAC;AAAEpB,IAAAA;AAAF,GAAD,MAAe;AACpBA,IAAAA;AADoB,GAAf;AADqB,CAAR,CAAP,CAIZD,WAJY,CAAf","sourcesContent":["\r\nconst ProductList = (\r\n  { data: { loading, error, items }, search },\r\n  req\r\n) => {\r\n  if (error) return \"Error loading restaurants\";\r\n\r\n\r\n  if (items && items.length) {\r\n    //searchQuery\r\n    const searchQuery = items.filter(query =>\r\n      query.name.toLowerCase().includes(search)\r\n    );\r\n    if (searchQuery.length != 0) {\r\n      return (\r\n        <div>\r\n          <div className=\"h-100\">\r\n            {searchQuery.map(res => (\r\n    \r\n                        <div className=\"af-class-product-card\">\r\n                        <div className=\"af-class-product-card-image af-class-product-card-2\"><img src={`http://localhost:1337${res.image.url}`} loading=\"lazy\" alt className=\"af-class-image-4\" /></div>\r\n                        <div className=\"af-class-product-card-description\">\r\n                          <div className=\"af-class-div-block-38\">\r\n                          <h3 className=\"af-class-product-name-title\">{res.name}<br /></h3>\r\n                          </div>\r\n                          <div className=\"af-class-price-wrapper\">\r\n                            <h2 className=\"af-class-product-price\">{res.price} Kƒç<br /></h2>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                  \r\n \r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    } else {\r\n      return <h1>No Products Found</h1>;\r\n    }\r\n  }\r\n  return <h1>Loading...</h1>;\r\n};\r\n\r\nconst query = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      price\r\n      image {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default graphql(query, {\r\n  props: ({ data }) => ({\r\n    data\r\n  })\r\n})(ProductList);"]},"metadata":{},"sourceType":"module"}