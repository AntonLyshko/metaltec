{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\Next\\\\metaltec\\\\components\\\\checkout-form.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { destroyCookie } from \"nookies\";\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = ({\n  paymentIntent\n}) => {\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const {\n    0: checkoutSuccess,\n    1: setCheckoutSuccess\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const {\n      paymentResult,\n      error\n    } = await stripe.confirmCardPayment(paymentIntent.client_secret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    }, {\n      handleActions: false\n    });\n    console.log(paymentResult);\n    if (error) throw new Error(error.message);\n\n    if (paymentResult.status === \"requires_action\") {\n      // Let Stripe.js handle the rest of the payment flow.\n      const {\n        error\n      } = await stripe.confirmCardPayment(paymentIntent.client_secret);\n\n      if (error) {\n        // The payment failed -- ask your customer for a new payment method.\n        console.log(error);\n      } else {\n        // The payment has succeeded.\n        alert('success');\n      }\n    } else {// The payment has succeeded.\n    }\n\n    console.log(paymentResult); // if (status === \"succeeded\") {\n    //     setCheckoutSuccess(true);\n    //     destroyCookie(null, \"paymentIntentId\");\n    // }\n  };\n\n  if (checkoutSuccess) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 33\n    }\n  }, \"Payment successful!\");\n  return __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"Pay now\"), checkoutError && __jsx(\"span\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 31\n    }\n  }, checkoutError));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/anton/Desktop/Next/metaltec/components/checkout-form.js"],"names":["React","useState","destroyCookie","CardElement","useStripe","useElements","CheckoutForm","paymentIntent","checkoutError","setCheckoutError","checkoutSuccess","setCheckoutSuccess","stripe","elements","handleSubmit","e","preventDefault","paymentResult","error","confirmCardPayment","client_secret","payment_method","card","getElement","handleActions","console","log","Error","message","status","alert","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,WAAhC,QAAkD,yBAAlD;;AAEA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAuB;AACxC,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,EAAlD;AACA,QAAM;AAAA,OAACS,eAAD;AAAA,OAAkBC;AAAlB,MAAwCV,QAAQ,EAAtD;AAEA,QAAMW,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAMS,QAAQ,GAAGR,WAAW,EAA5B;;AAEA,QAAMS,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;AAEI,UAAM;AAACC,MAAAA,aAAD;AAAgBC,MAAAA;AAAhB,QAAyB,MAAMN,MAAM,CAACO,kBAAP,CAClCZ,aAAa,CAACa,aADoB,EAEjC;AACIC,MAAAA,cAAc,EAAE;AACZC,QAAAA,IAAI,EAAET,QAAQ,CAACU,UAAT,CAAoBpB,WAApB;AADM;AADpB,KAFiC,EAOjC;AAACqB,MAAAA,aAAa,EAAE;AAAhB,KAPiC,CAArC;AAUEC,IAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ;AAEF,QAAIC,KAAJ,EAAW,MAAM,IAAIS,KAAJ,CAAUT,KAAK,CAACU,OAAhB,CAAN;;AAEX,QAAIX,aAAa,CAACY,MAAd,KAAyB,iBAA7B,EAAgD;AAC5C;AACA,YAAM;AAACX,QAAAA;AAAD,UAAU,MAAMN,MAAM,CAACO,kBAAP,CAA0BZ,aAAa,CAACa,aAAxC,CAAtB;;AACA,UAAIF,KAAJ,EAAW;AACT;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACD,OAHD,MAGO;AACL;AACAY,QAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AACF,KAVH,MAUS,CACL;AAED;;AAEHL,IAAAA,OAAO,CAACC,GAAR,CAAYT,aAAZ,EAhCwB,CAiCxB;AACA;AACA;AACA;AACP,GArCD;;AAuCA,MAAIP,eAAJ,EAAqB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AAErB,SACI;AAAM,IAAA,QAAQ,EAAGK,CAAD,IAAKD,YAAY,CAACC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACH,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAMKJ,aAAa,IAAI;AAAM,IAAA,KAAK,EAAE;AAAEuB,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCvB,aAAhC,CANtB,CADJ;AAUH,CA1DD;;AA4DA,eAAeF,YAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { destroyCookie } from \"nookies\";\r\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'\r\n\r\nconst CheckoutForm = ({ paymentIntent }) => {\r\n    const [checkoutError, setCheckoutError] = useState();\r\n    const [checkoutSuccess, setCheckoutSuccess] = useState();\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n            const {paymentResult, error} = await stripe.confirmCardPayment(\r\n               paymentIntent.client_secret,\r\n                {\r\n                    payment_method: {\r\n                        card: elements.getElement(CardElement)\r\n                    }\r\n                },\r\n                {handleActions: false}\r\n              );\r\n            \r\n              console.log(paymentResult);\r\n\r\n            if (error) throw new Error(error.message);\r\n\r\n            if (paymentResult.status === \"requires_action\") {\r\n                // Let Stripe.js handle the rest of the payment flow.\r\n                const {error} = await stripe.confirmCardPayment(paymentIntent.client_secret);\r\n                if (error) {\r\n                  // The payment failed -- ask your customer for a new payment method.\r\n                  console.log(error);\r\n                } else {\r\n                  // The payment has succeeded.\r\n                  alert('success')\r\n                }\r\n              } else {\r\n                // The payment has succeeded.\r\n                \r\n              }\r\n\r\n            console.log(paymentResult)\r\n            // if (status === \"succeeded\") {\r\n            //     setCheckoutSuccess(true);\r\n            //     destroyCookie(null, \"paymentIntentId\");\r\n            // }\r\n    }\r\n\r\n    if (checkoutSuccess) return <p>Payment successful!</p>;\r\n\r\n    return (\r\n        <form onSubmit={(e)=>handleSubmit(e)}>\r\n            <CardElement />\r\n\r\n            <button type=\"submit\" disabled={!stripe}>\r\n                Pay now\r\n            </button>\r\n            {checkoutError && <span style={{ color: \"red\" }}>{checkoutError}</span>}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}