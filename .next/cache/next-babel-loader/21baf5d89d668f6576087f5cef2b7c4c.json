{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anton\\\\Desktop\\\\Next\\\\metaltec\\\\components\\\\checkout-form.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from \"react\";\nimport { destroyCookie } from \"nookies\";\nimport { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = ({}) => {\n  const {\n    0: checkoutError,\n    1: setCheckoutError\n  } = useState();\n  const {\n    0: checkoutSuccess,\n    1: setCheckoutSuccess\n  } = useState();\n  const stripe = useStripe();\n  const elements = useElements();\n  const client_secret = \"pk_test_51HfCQbKalev6rGvBMHNaOtgfWfMUKJzkhs7TfmcQ5fjp5XyoeG2z97erNGBrtWPLnv3QmN1ImHhkNzX0fgX9lLKQ00ogCnUjLE\";\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const {\n        paymentIntent,\n        error: confirmError\n      } = await stripe.confirmCardPayment(client_secret, {\n        payment_method: {\n          card: elements.getElement(CardElement)\n        }\n      }, {\n        handleActions: false\n      });\n      if (confirmError) throw new Error(error.message);\n\n      if (paymentIntent.status === \"requires_action\") {\n        // Let Stripe.js handle the rest of the payment flow.\n        const {\n          error\n        } = await stripe.confirmCardPayment(client_secret);\n\n        if (error) {\n          // The payment failed -- ask your customer for a new payment method.\n          console.log(error);\n        } else {\n          // The payment has succeeded.\n          alert('success');\n        }\n      } else {\n        // The payment has succeeded.\n        alert('success');\n      }\n\n      console.log(paymentResult); // if (status === \"succeeded\") {\n      //     setCheckoutSuccess(true);\n      //     destroyCookie(null, \"paymentIntentId\");\n      // }\n    } catch (err) {\n      console.log(err);\n      setCheckoutError(err.message);\n    }\n  };\n\n  if (checkoutSuccess) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, \"Payment successful!\");\n  return __jsx(\"form\", {\n    onSubmit: e => handleSubmit(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, __jsx(CardElement, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\",\n    disabled: !stripe,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Pay now\"), checkoutError && __jsx(\"span\", {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 31\n    }\n  }, checkoutError));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/anton/Desktop/Next/metaltec/components/checkout-form.js"],"names":["React","useState","destroyCookie","CardElement","useStripe","useElements","CheckoutForm","checkoutError","setCheckoutError","checkoutSuccess","setCheckoutSuccess","stripe","elements","client_secret","handleSubmit","e","preventDefault","paymentIntent","error","confirmError","confirmCardPayment","payment_method","card","getElement","handleActions","Error","message","status","console","log","alert","paymentResult","err","color"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,WAAhC,QAAkD,yBAAlD;;AAEA,MAAMC,YAAY,GAAG,CAAC,EAAD,KAAU;AAC3B,QAAM;AAAA,OAACC,aAAD;AAAA,OAAgBC;AAAhB,MAAoCP,QAAQ,EAAlD;AACA,QAAM;AAAA,OAACQ,eAAD;AAAA,OAAkBC;AAAlB,MAAwCT,QAAQ,EAAtD;AAEA,QAAMU,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,aAAa,GAAG,6GAAtB;;AAEA,QAAMC,YAAY,GAAG,MAAMC,CAAN,IAAW;AAC5BA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI;AACA,YAAM;AAACC,QAAAA,aAAD;AAAgBC,QAAAA,KAAK,EAAEC;AAAvB,UAAuC,MAAMR,MAAM,CAACS,kBAAP,CAC/CP,aAD+C,EAE/C;AACIQ,QAAAA,cAAc,EAAE;AACZC,UAAAA,IAAI,EAAEV,QAAQ,CAACW,UAAT,CAAoBpB,WAApB;AADM;AADpB,OAF+C,EAO/C;AAACqB,QAAAA,aAAa,EAAE;AAAhB,OAP+C,CAAnD;AAWA,UAAIL,YAAJ,EAAkB,MAAM,IAAIM,KAAJ,CAAUP,KAAK,CAACQ,OAAhB,CAAN;;AAElB,UAAIT,aAAa,CAACU,MAAd,KAAyB,iBAA7B,EAAgD;AAC5C;AACA,cAAM;AAACT,UAAAA;AAAD,YAAU,MAAMP,MAAM,CAACS,kBAAP,CAA0BP,aAA1B,CAAtB;;AACA,YAAIK,KAAJ,EAAW;AACT;AACAU,UAAAA,OAAO,CAACC,GAAR,CAAYX,KAAZ;AACD,SAHD,MAGO;AACL;AACAY,UAAAA,KAAK,CAAC,SAAD,CAAL;AACD;AACF,OAVH,MAUS;AACL;AACAA,QAAAA,KAAK,CAAC,SAAD,CAAL;AACD;;AAEHF,MAAAA,OAAO,CAACC,GAAR,CAAYE,aAAZ,EA7BA,CA8BA;AACA;AACA;AACA;AACH,KAlCD,CAkCE,OAAOC,GAAP,EAAY;AACVJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,GAAZ;AACAxB,MAAAA,gBAAgB,CAACwB,GAAG,CAACN,OAAL,CAAhB;AACH;AACJ,GAxCD;;AA0CA,MAAIjB,eAAJ,EAAqB,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAP;AAErB,SACI;AAAM,IAAA,QAAQ,EAAGM,CAAD,IAAKD,YAAY,CAACC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACJ,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHJ,EAMKJ,aAAa,IAAI;AAAM,IAAA,KAAK,EAAE;AAAE0B,MAAAA,KAAK,EAAE;AAAT,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgC1B,aAAhC,CANtB,CADJ;AAUH,CA9DD;;AAgEA,eAAeD,YAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { destroyCookie } from \"nookies\";\r\nimport {CardElement, useStripe, useElements} from '@stripe/react-stripe-js'\r\n\r\nconst CheckoutForm = ({  }) => {\r\n    const [checkoutError, setCheckoutError] = useState();\r\n    const [checkoutSuccess, setCheckoutSuccess] = useState();\r\n\r\n    const stripe = useStripe();\r\n    const elements = useElements();\r\n    const client_secret = \"pk_test_51HfCQbKalev6rGvBMHNaOtgfWfMUKJzkhs7TfmcQ5fjp5XyoeG2z97erNGBrtWPLnv3QmN1ImHhkNzX0fgX9lLKQ00ogCnUjLE\";\r\n\r\n    const handleSubmit = async e => {\r\n        e.preventDefault();\r\n        try {\r\n            const {paymentIntent, error: confirmError} = await stripe.confirmCardPayment(\r\n                client_secret,\r\n                {\r\n                    payment_method: {\r\n                        card: elements.getElement(CardElement)\r\n                    }\r\n                },\r\n                {handleActions: false}\r\n              );\r\n\r\n\r\n            if (confirmError) throw new Error(error.message);\r\n\r\n            if (paymentIntent.status === \"requires_action\") {\r\n                // Let Stripe.js handle the rest of the payment flow.\r\n                const {error} = await stripe.confirmCardPayment(client_secret);\r\n                if (error) {\r\n                  // The payment failed -- ask your customer for a new payment method.\r\n                  console.log(error);\r\n                } else {\r\n                  // The payment has succeeded.\r\n                  alert('success')\r\n                }\r\n              } else {\r\n                // The payment has succeeded.\r\n                alert('success')\r\n              }\r\n\r\n            console.log(paymentResult)\r\n            // if (status === \"succeeded\") {\r\n            //     setCheckoutSuccess(true);\r\n            //     destroyCookie(null, \"paymentIntentId\");\r\n            // }\r\n        } catch (err) {\r\n            console.log(err);\r\n            setCheckoutError(err.message);\r\n        }\r\n    }\r\n\r\n    if (checkoutSuccess) return <p>Payment successful!</p>;\r\n\r\n    return (\r\n        <form onSubmit={(e)=>handleSubmit(e)}>\r\n            <CardElement />\r\n\r\n            <button type=\"submit\" disabled={!stripe}>\r\n                Pay now\r\n            </button>\r\n            {checkoutError && <span style={{ color: \"red\" }}>{checkoutError}</span>}\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default CheckoutForm"]},"metadata":{},"sourceType":"module"}